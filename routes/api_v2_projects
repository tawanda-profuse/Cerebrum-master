// routes/projects.js or routes/api_v2_router.js
const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const multer = require('multer');
const UserModel = require('../models/User.schema');
const { verifyToken } = require('../utilities/functions');
const s3FileManager = require('../s3FileManager');

// GET route for fetching user projects
router.get('/', verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        const projects = await UserModel.getUserProjects(userId);
        res.send(projects);
    } catch (error) {
        console.error('Error fetching projects:', error);
        res.status(500).send('Internal Server Error');
    }
});

async function addNewProject(userId, projectName, id, appName) {
    try {
        const user = await UserModel.findById(userId);
        if (!user) {
            console.log('User not found');
        }

        const newProject = {
            id: id,
            name: projectName,
            createdAt: new Date().toISOString(),
            projectOverView: null,
            taskList: [],
            appPath: null,
            logs: [],
            sketches: [],
            appName: appName,
            isCompleted: false,
        };

        await UserModel.addProject(userId, newProject);
    } catch (error) {
        console.error('Error adding new project:', error);
    }
}

router.post('/create-project', verifyToken, async (req, res) => {
    try {
        const { projectName, projectId } = req.body;
        if (!projectName || !projectId) {
            return res.status(400).json({ error: 'Project name and ID are required.' });
        }

        const userId = req.user.id;
        const appName = projectName.toLowerCase().replace(/\s+/g, '-');
        const workspaceDir = path.join(__dirname, '..', 'workspace');
        await fs.mkdir(workspaceDir, { recursive: true });
        const projectDir = path.join(workspaceDir, projectId);
        await fs.mkdir(projectDir, { recursive: true });

        await addNewProject(userId, projectName, projectId, appName);

        res.status(201).json({ message: 'Project created successfully.' });
    } catch (error) {
        console.error('Failed to create project:', error);
        const statusCode = error.isClientError ? 400 : 500;
        res.status(statusCode).json({ error: error.message });
    }
});

router.delete('/project', verifyToken, async (req, res) => {
    const userId = req.user.id;
    const projectId = req.body.projectId;

    try {
        await UserModel.deleteProject(userId, projectId);
        await s3FileManager.deleteFolder(projectId);
        res.status(200).json({ message: 'Project deleted successfully' });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

module.exports = router;
